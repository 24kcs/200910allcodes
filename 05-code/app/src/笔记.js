/**
 * 
 * 
 * 
 * Vue框架其实最终都是进行单页面应用开发
 * 单页面应用:就是一个页面,即使有跳转,也是在同一个页面中进行跳转
 * 
 * 
 * 路由:是一种映射关系,地址和组件之间的关系
 * 如:A地址和A组件,B地址和B组件,地址和组件之间发生了关系后,此时形成了一种映射关系
 * 将来: 访问A地址,则显示A组件内容,此时:A组件不再是普通的组件,此时A组件称为:路由组件
 * 
 * 普通组件:就是一个组件文件,正常的引入,正常的使用
 * 
 * 全局公共组件:  Vue.component('组件名字',组件对象)---->此时这个组件就是全局的公共组件,任何一个组件都可以直接使用(不需要引入了),在main.js中进行注册的
 * 
 * 路由组件:有地址和组件之间形成了映射关系后,该组件就是路由组件
 * 路由器:专门管理路由的
 * 路由其实也是对象,路由器也是对象
 * 
 * Vue中如果想要使用路由器管理路由,Vue本身没有这个能力,要想实现单页面应用,操作路由,必须要下载包
 * vue-router 插件
 * 
 * 管理路由的相关代码内容,会放在一个单独的文件夹中router目录
 * 步骤:
 * npm install vue-router
 * 引入Vue
 * 引入vue-router
 * 声明使用插件  Vue.use()
 * 创建路由器对象,并暴露出去后进行注册
 * 
 * 普通的组件一般放在components目录中(公司里的要求不同,目录名字不同)
 * 路由组件,一般放在pages目录中
 * 
 * 
 * 路由创建后,为了实现单页面应用
 * 此时,需要路由链接和路由视图
 * 路由链接:<router-link>,路由链接,最终解析成了a标签,href="" 这里面就是路由的地址
 *  <router-link>标签中的to="地址" , 最终a标签中的href就是之前的to
 * 路由视图:<router-view>,路由视图,最终解析的是路由组件,这里显示的是一个组件的内容
 * 
 * 点击不同的路由链接(切换不同的地址),就会显示不同的组件内容
 * 
 * 销毁组件的方式:
 *  this.$destroy()  主动销毁(自己理解的说法)
 *  切换路由链接,显示不同的路由组件内容,此时也可以销毁某个组件    间接销毁(自己理解的说法)
 *  v-if/v-else  也可以销毁一个组件   间接销毁(自己理解的说法)
 * 
 * 
 * 一级路由: 只有一个路径地址   如: /about
 * 二级路由: 地址后面还有其他的地址  如: /home/news
 * 
 * 
 * 当项目中使用了vue-router ,路由器已经注册了
 * 此时每个组件实例对象中都会出现两个属性对象
 * $route:路由信息对象(包含了路由跳转的地址,传递的参数(query/params/meta))
 * $router:路由器对象(控制路由,也就意味着可以控制路由跳转及传参)
 * 
 * 
 * 属性对象:当一个属性的类型是对象的时候
 * var obj = { name:'小明' , wife:{name:'小红'}}
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */