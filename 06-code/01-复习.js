/**
 * 
 * 
 * 1.Vue的理解
 * 是一个渐进式的前端框架
 * Vue中有数据绑定,数据代理,模版解析,组件化,有指令,组件通信
 * 
 * 2. 常见的模版语法
 * 插值  {{表达式}}
 * new Vue({
 *  el:'#app',
 *  data:{
 *    msg:'真好'  // 属性
 *  }
 * })
 * 
 * 3. 指令
 *  v-bind  简写   :   强制数据绑定, 当一个html标签中的某个属性如果需要有动态的数据,此时可以使用该指令
 *  v-model 双向数据绑定,在表单标签中经常使用, 原理:input事件+动态的value
 *  v-on  简写  @  事件绑定指令, 当一个html标签中需要绑定事件的时候
 *        该事件对应的回调函数的位置,可以直接写表达式的(代码很简单,如:直接赋值/取反)
 *        该事件对应的回调函数中,可以直接传入事件参数对象  @event
 *  v-if/v-else/v-else-if  可以设置标签显示或者隐藏
 *  v-show  同上
 *  二者区别: 真实DOM树中是否存在,或者控制css中的display是否为none
 *  v-for 遍历数组/对象  一般配合key使用,key最好是唯一或者不变的
 *  v-text   相当于DOM中的innerText或者textContent
 *  v-html   相当于DOM中的innerHTML
 * 
 * 4. html模版中动态样式的操作
 *   :class和:style
 * 
 * 5.组件通信: 组件和组件之间传递数据
 * 组件的关系:父子(直接/间接)关系,兄弟关系
 * 方式:
 * props:父子组件通信
 * 自定义事件:父子组件通信
 * PubSub: 任意组件通信,不属于Vue
 * 事件总线:任意组件通信
 * 插槽(具名插槽/命名插槽),父子组件通信
 * 
 * 6. element-ui在Vue的脚手架中如何使用按需引入
 * 直接安装,在main.js中引入element-ui库,及对应的样式文件
 * 按需引入,需要在.babelrc 文件中进行配置
 * 
 * 
 * 课程介绍:
 * 
 * 1.Vue中异步操作
 * 2.Vue中的路由
 * 3.Vuex
 * 4.源码
 * 
 * 
 * 
 * 
 * 
 * 
 */